{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vvyvi\\\\Desktop\\\\apihub\\\\src\\\\Components\\\\weather.js\";\nimport React, { Component } from 'react';\n\nclass Weather extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      city: \"\"\n    };\n    this.updateCity = this.updateCity.bind(this);\n    this.updateText = this.updateText.bind(this);\n    this.loadCity = this.loadCity.bind(this);\n  }\n\n  componentDidMount() {//  window.addEventListener('load', this.updateCity);\n  }\n\n  updateCity() {\n    fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails').then(response => response.json()) // .then(data => console.log(data.geobytescity))\n    .then(data => this.setState({\n      city: data.geobytescity,\n      text: \"\"\n    })).then(console.log(this.state.city)).then(this.updateText()).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  loadCity() {\n    const value = this.refs.wea.value; //console.log(value)\n\n    this.setState(prevState => {\n      return {\n        city: value,\n        text: prevState.text\n      };\n    });\n    this.updateText();\n  }\n\n  updateText() {\n    let weather;\n    const value = this.refs.wea.value;\n    console.log('api.openweathermap.org/data/2.5/weather?q=' + value + '&appid=d0ca8d3b92279927c97dbc726daa6886');\n    fetch('api.openweathermap.org/data/2.5/weather?q=' + value + '&appid=d0ca8d3b92279927c97dbc726daa6886').then(response => response.json()).then(data => console.log(data, `api.openweathermap.org/data/2.5/weather?q=` + this.state.city + `&appid=d0ca8d3b92279927c97dbc726daa6886`)).then(data => this.setState({\n      text: data.weather[0].description,\n      city: data.name\n    })).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel norris\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, \"location, type if not applicable\", /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.loadCity,\n      type: \"text\",\n      ref: \"wea\",\n      value: this.state.city,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, this.state.text));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/Users/vvyvi/Desktop/apihub/src/Components/weather.js"],"names":["React","Component","Weather","constructor","state","text","city","updateCity","bind","updateText","loadCity","componentDidMount","fetch","then","response","json","data","setState","geobytescity","console","log","catch","error","message","value","refs","wea","prevState","weather","description","name","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Weather extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            text: \"\",\r\n            city: \"\"\r\n        }\r\n        this.updateCity = this.updateCity.bind(this);\r\n        this.updateText = this.updateText.bind(this);\r\n        this.loadCity = this.loadCity.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n          //  window.addEventListener('load', this.updateCity);\r\n    }\r\n\r\n    updateCity() {\r\n     fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails')\r\n        .then(response => response.json())\r\n       // .then(data => console.log(data.geobytescity))\r\n        .then(data => this.setState({\r\n            city: data.geobytescity,\r\n            text: \"\"\r\n        }))\r\n        .then(console.log(this.state.city))\r\n        .then(this.updateText())\r\n        .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n    }\r\n\r\n    loadCity(){\r\n        const value = this.refs.wea.value;\r\n        //console.log(value)\r\n        this.setState(prevState => {\r\n                return {\r\n                  city: value,\r\n                  text: prevState.text\r\n                }\r\n              });\r\n        this.updateText();\r\n    }\r\n\r\n    updateText() {\r\n        let weather;\r\n        const value = this.refs.wea.value;\r\n        console.log('api.openweathermap.org/data/2.5/weather?q='+value+'&appid=d0ca8d3b92279927c97dbc726daa6886')\r\n         fetch('api.openweathermap.org/data/2.5/weather?q='+value+'&appid=d0ca8d3b92279927c97dbc726daa6886')\r\n            .then(response => response.json())\r\n            .then(data => console.log(data, `api.openweathermap.org/data/2.5/weather?q=`+this.state.city+`&appid=d0ca8d3b92279927c97dbc726daa6886`))\r\n            .then(data => this.setState({\r\n                text: data.weather[0].description,\r\n                city: data.name\r\n            }))\r\n            .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n        }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"panel norris\">\r\n                location, type if not applicable\r\n                <input onChange={this.loadCity} type=\"text\" ref=\"wea\" value={this.state.city}></input>\r\n                <div>\r\n                {this.state.text}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather"]},"metadata":{},"sourceType":"module"}