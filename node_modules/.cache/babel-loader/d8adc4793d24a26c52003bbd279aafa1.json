{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vvyvi\\\\Desktop\\\\apihub\\\\src\\\\Components\\\\weather.js\";\nimport React, { Component } from 'react';\nimport './style/weather.css';\n\nclass Weather extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      city: \"\",\n      country: \"\",\n      temp: 0,\n      icon: \"\"\n    };\n    this.updateCity = this.updateCity.bind(this);\n    this.updateText = this.updateText.bind(this);\n    this.loadCity = this.loadCity.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.updateCity);\n    window.addEventListener('load', this.resize);\n    document.getElementById(\"wea\").addEventListener(\"input\", this.resize);\n  }\n\n  updateCity() {\n    fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails').then(response => response.json()) // .then(data => console.log(data.geobytescity))\n\n    /*.then(data => {this.setState({\r\n        country: data.geobytescountry\r\n    }); return data;})*/\n    //.then(data => this.assignValue(data.geobytescity))\n    .then(data => this.loadCity(data.geobytescity)).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  loadCity(value) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`).then(response => response.json()).then(data => {\n      this.assignValue(data.name);\n      return data;\n    }).then(data => this.setState({\n      city: data.name,\n      text: data.weather[0].description,\n      country: data.sys.country,\n      temp: (data.main.temp - 273.15).toFixed(1),\n      icon: data.weather[0].icon\n    })).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  updateText() {\n    const value = this.refs.wea.value;\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`).then(response => response.json()) //.then(response => console.log(response))\n    .then(data => this.setState({\n      city: data.name,\n      text: data.weather[0].description,\n      country: data.sys.country,\n      temp: (data.main.temp - 273.15).toFixed(1),\n      icon: data.weather[0].icon\n    })).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  assignValue(i) {\n    document.getElementById(\"wea\").value = i;\n  }\n\n  removeValue() {\n    document.getElementById(\"wea\").value = \"\";\n  }\n\n  resize() {\n    let hide = document.getElementById('hide');\n    let txt = document.getElementById('wea');\n    hide.textContent = txt.value;\n    txt.style.width = hide.width + \"px\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel weather dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"location, type if not applicable\", /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, this.state.temp, \"\\xB0C\"), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"hide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateText,\n      type: \"text\",\n      ref: \"wea\",\n      id: \"wea\",\n      onClick: this.removeValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 40\n      }\n    }), \", \", /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }\n    }, this.state.country), this.state.text);\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/Users/vvyvi/Desktop/apihub/src/Components/weather.js"],"names":["React","Component","Weather","constructor","state","text","city","country","temp","icon","updateCity","bind","updateText","loadCity","componentDidMount","window","addEventListener","resize","document","getElementById","fetch","then","response","json","data","geobytescity","catch","error","setState","message","value","assignValue","name","weather","description","sys","main","toFixed","refs","wea","i","removeValue","hide","txt","textContent","style","width","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './style/weather.css'\r\n\r\nclass Weather extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            text: \"\",\r\n            city: \"\",\r\n            country: \"\",\r\n            temp: 0,\r\n            icon: \"\"\r\n        }\r\n        this.updateCity = this.updateCity.bind(this);\r\n        this.updateText = this.updateText.bind(this);\r\n        this.loadCity = this.loadCity.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n           window.addEventListener('load', this.updateCity);\r\n           window.addEventListener('load', this.resize);\r\n           document.getElementById(\"wea\").addEventListener(\"input\", this.resize);\r\n    }\r\n\r\n    updateCity() {\r\n     fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails')\r\n        .then(response => response.json())\r\n       // .then(data => console.log(data.geobytescity))\r\n        /*.then(data => {this.setState({\r\n            country: data.geobytescountry\r\n        }); return data;})*/\r\n        //.then(data => this.assignValue(data.geobytescity))\r\n        .then(data => this.loadCity(data.geobytescity))\r\n        .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n    }\r\n\r\n    loadCity(value){\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`)\r\n         .then(response => response.json())\r\n         .then(data => {this.assignValue(data.name); return data;})\r\n         .then(data => this.setState({\r\n                 city: data.name,\r\n                 text: data.weather[0].description,\r\n                 country: data.sys.country,\r\n                 temp: (data.main.temp-273.15).toFixed(1),\r\n                 icon: data.weather[0].icon\r\n             }))\r\n         .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n    }\r\n\r\n    updateText() {\r\n         const value = this.refs.wea.value;\r\n         fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`)\r\n            .then(response => response.json())\r\n            //.then(response => console.log(response))\r\n            .then(data => this.setState({\r\n                city: data.name,\r\n                text: data.weather[0].description,\r\n                country: data.sys.country,\r\n                temp: (data.main.temp-273.15).toFixed(1),\r\n                icon: data.weather[0].icon\r\n            }))\r\n            .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n        }\r\n\r\n    assignValue(i){\r\n         document.getElementById(\"wea\").value=i;\r\n    }\r\n\r\n     removeValue(){\r\n        document.getElementById(\"wea\").value=\"\";\r\n     }\r\n\r\n     resize() {\r\n     let hide = document.getElementById('hide');\r\n     let txt = document.getElementById('wea');\r\n\r\n       hide.textContent = txt.value;\r\n       txt.style.width = hide.width + \"px\";\r\n     }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"panel weather dark\">\r\n                location, type if not applicable\r\n                <h1>{this.state.temp}°C</h1>\r\n                <span id=\"hide\"></span><input onChange={this.updateText} type=\"text\" ref=\"wea\" id=\"wea\" onClick={this.removeValue}></input>\r\n                , <h2>{this.state.country}</h2>\r\n                {this.state.text}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather"]},"metadata":{},"sourceType":"module"}