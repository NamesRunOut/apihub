{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vvyvi\\\\Desktop\\\\apihub\\\\src\\\\Components\\\\weather.js\";\nimport React, { Component } from 'react';\n\nclass Weather extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      city: \"\",\n      country: \"\"\n    };\n    this.updateCity = this.updateCity.bind(this);\n    this.updateText = this.updateText.bind(this);\n    this.loadCity = this.loadCity.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', this.updateCity);\n  }\n\n  updateCity() {\n    fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails').then(response => response.json()) // .then(data => console.log(data.geobytescity))\n    .then(data => {\n      this.setState({\n        country: data.geobytescountry\n      });\n      return data;\n    }) //.then(data => this.assignValue(data.geobytescity))\n    .then(data => this.loadCity(data.geobytescity)).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  loadCity(value) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`).then(response => response.json()).then(data => {\n      this.assignValue(data.name);\n      return data;\n    }).then(data => this.setState({\n      city: data.name,\n      text: data.weather[0].description\n    })).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  updateText() {\n    const value = this.refs.wea.value;\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`).then(response => response.json()) //.then(response => console.log(response))\n    .then(data => this.setState({\n      city: data.name,\n      text: data.weather[0].description\n    })).catch(error => this.setState({\n      text: 'error fetching data ' + error.message\n    }));\n  }\n\n  assignValue(i) {\n    document.getElementById(\"wea\").value = i;\n  }\n\n  removeValue() {\n    document.getElementById(\"wea\").value = \"\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"panel weather\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"location, type if not applicable\", /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.updateText,\n      type: \"text\",\n      ref: \"wea\",\n      id: \"wea\",\n      onClick: this.removeValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, this.state.country, \",\", this.state.text));\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/Users/vvyvi/Desktop/apihub/src/Components/weather.js"],"names":["React","Component","Weather","constructor","state","text","city","country","updateCity","bind","updateText","loadCity","componentDidMount","window","addEventListener","fetch","then","response","json","data","setState","geobytescountry","geobytescity","catch","error","message","value","assignValue","name","weather","description","refs","wea","i","document","getElementById","removeValue","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Weather extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            text: \"\",\r\n            city: \"\",\r\n            country: \"\"\r\n        }\r\n        this.updateCity = this.updateCity.bind(this);\r\n        this.updateText = this.updateText.bind(this);\r\n        this.loadCity = this.loadCity.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n           window.addEventListener('load', this.updateCity);\r\n    }\r\n\r\n    updateCity() {\r\n     fetch('https://cors-anywhere.herokuapp.com/gd.geobytes.com/GetCityDetails')\r\n        .then(response => response.json())\r\n       // .then(data => console.log(data.geobytescity))\r\n        .then(data => {this.setState({\r\n            country: data.geobytescountry\r\n        }); return data;})\r\n        //.then(data => this.assignValue(data.geobytescity))\r\n        .then(data => this.loadCity(data.geobytescity))\r\n        .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n    }\r\n\r\n    loadCity(value){\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`)\r\n         .then(response => response.json())\r\n         .then(data => {this.assignValue(data.name); return data;})\r\n         .then(data => this.setState({\r\n                 city: data.name,\r\n                 text: data.weather[0].description,\r\n                 \r\n             }))\r\n         .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n    }\r\n\r\n    updateText() {\r\n         const value = this.refs.wea.value;\r\n         fetch(`https://api.openweathermap.org/data/2.5/weather?q=${value}&appid=d0ca8d3b92279927c97dbc726daa6886`)\r\n            .then(response => response.json())\r\n            //.then(response => console.log(response))\r\n            .then(data => this.setState({\r\n                city: data.name,\r\n                text: data.weather[0].description\r\n            }))\r\n            .catch(error => this.setState({ text: 'error fetching data '+error.message }))\r\n        }\r\n\r\n    assignValue(i){\r\n         document.getElementById(\"wea\").value=i;\r\n    }\r\n\r\n     removeValue(){\r\n        document.getElementById(\"wea\").value=\"\";\r\n     }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"panel weather\">\r\n                location, type if not applicable\r\n                <input onChange={this.updateText} type=\"text\" ref=\"wea\" id=\"wea\" onClick={this.removeValue}></input>\r\n                <div>\r\n                {this.state.country},\r\n                {this.state.text}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather"]},"metadata":{},"sourceType":"module"}